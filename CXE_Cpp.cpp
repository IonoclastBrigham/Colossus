/*
 *  CXE_Cpp.cpp
 *  Colossus
 *
 *  Created by Awesomest Prime on 7/16/10.
 *  Copyright 2010 brigham toskin. All rights reserved.
 *
 */


#include <iostream>
	using std::cout;
	using std::endl;

#include "CXE.h"


// Main ////////////////////////////////////////////////////////////////////////

void MainCpp::Return()
{
	throw Exception(__PRETTY_FUNCTION__, "main cannot return void in Colossus");
}

// Class ///////////////////////////////////////////////////////////////////////

void ClassCpp::SetAccess(Access a)
{
	body.push(new Accessor(a));
}

Method* ClassCpp::Ctor()
{
	Method* m = new MethodCommon("", name, "");
	body.push(m);
	return m; 
}

Method* ClassCpp::Dtor()
{
	Method* m = new MethodCommon("", "~" + name, "");
	body.push(m);
	return m; 
}

Method* ClassCpp::Main()
{
	main_defined = true;
	//Method* m = new MethodCommon("static void", "main", "vector<string>& args");
	Method* m = new MainCpp();
	body.push(m);
	return m; 
}

Method* ClassCpp::NewMethod(Access a, const string& ret, const string& name,
							const string& params)
{
	Method* m = new MethodCommon(ret, name, params);
	body.push(m);
	return m; 
}

Var ClassCpp::NewVar(Access a, const string& type, const string& name)
{
	body.push(new Var(type + " " + name + ";\n")); 
	return Var(name);
}

void ClassCpp::End()
{
	while (body.size())
	{
		text += body.front()->str();
		delete body.front();
		body.pop();
	}
	text += "};\n\n";
}

string ClassCpp::str() const
{
	string inherit = (inheritance == "" ? "" : " : " + inheritance) + "\n";
	string s = "class " + name + inherit + text;
	if(main_defined)
		s += "\nint main(int argc, char** argv)\n{\n"
			"vector<string> args;\n"
			"for(int i = 1; i < argc; i++)\n"
			"args.push_back(argv[i]);\n"
			"return " + name + "::main(args);\n" +
			"}\n\n";
	return s;
}

// Module //////////////////////////////////////////////////////////////////////

ModuleCpp::ModuleCpp(const string& path) : path(path)
{
	text =	"// " + path + ".cpp\n" +
			"// Generated by the Colossus compiler\n" +
			"// Do not modify this file unless you really need to\n\n" +
			"#include <vector>\nusing std::vector;\n" +
			"#include <string>\nusing std::string;\n\n";
	
}

Class* ModuleCpp::NewClass(const string& name)
{
	ClassCpp* c = new ClassCpp(name);
	body.push(c);
	return c;
}

Class* ModuleCpp::NewClass(const string& name, const string& inheritance)
{
	ClassCpp* c = new ClassCpp(name, inheritance);
	body.push(c);
	return c;
}

void ModuleCpp::End()
{
	while (body.size())
	{
		text += body.front()->str();
		delete body.front();
		body.pop();
	}
	text += "\n";
	cout << text;
}